{"ast":null,"code":"import React from\"react\";import{useParams}from\"react-router-dom\";import CoursePageHeader from\"./CoursePageHeader\";import Entries from\"./Entries\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CoursePage=function CoursePage(_ref){var averagesArray=_ref.averagesArray,entriesArray=_ref.entriesArray,setIsOpen=_ref.setIsOpen,setFilledForm=_ref.setFilledForm,setCurrentPageName=_ref.setCurrentPageName,setIsFilledOpen=_ref.setIsFilledOpen,isFilledOpen=_ref.isFilledOpen,isOpen=_ref.isOpen,difficultyArray=_ref.difficultyArray,courseArray=_ref.courseArray,workloadArray=_ref.workloadArray,profRateArray=_ref.profRateArray,facultyArray=_ref.facultyArray,coursesArray=_ref.coursesArray,filledForm=_ref.filledForm,currentPageName=_ref.currentPageName,setIsSuccessOpen=_ref.setIsSuccessOpen;var _useParams=useParams(),id=_useParams.id;return/*#__PURE__*/_jsxs(React.Fragment,{children:[averagesArray.sort(function(a,b){return a.time<b.time?1:-1;}).filter(function(entry){if(!entry.average_title.toString().toLowerCase().includes(id.toString().toLowerCase())){return null;}else{return entry;}}).map(function(entry){return/*#__PURE__*/_jsx(CoursePageHeader,{id:id,courseName:entry.average_name,courseNumber:entry.average_number,averagesArray:averagesArray,entriesArray:entriesArray,difficulty:entry.average_difficulty,repeat:entry.average_repeat,workload:entry.average_workload,average:entry.average_avg,setIsOpen:setIsOpen,setFilledForm:setFilledForm,setCurrentPageName:setCurrentPageName,setIsFilledOpen:setIsFilledOpen,isFilledOpen:isFilledOpen,isOpen:isOpen,difficultyArray:difficultyArray,courseArray:courseArray,workloadArray:workloadArray,profRateArray:profRateArray,facultyArray:facultyArray,coursesArray:courseArray,filledForm:filledForm,currentPageName:currentPageName,setIsSuccessOpen:setIsSuccessOpen});}),entriesArray.sort(function(a,b){return a.course_time<b.course_time?1:-1;}).filter(function(entry){if(!entry.course_title.toString().toLowerCase().includes(id.toString().toLowerCase())){return null;}else{return entry;}}).map(function(entry){return/*#__PURE__*/_jsx(Entries,{courseName:entry.course_name,courseNumber:entry.course_number,professor:entry.course_prof,difficulty:entry.course_difficulty,workload:entry.course_workload,profRating:entry.course_prof_rating,comments:entry.course_comment,faculty:entry.course_faculty,day:entry.course_day,month:entry.course_month,year:entry.course_year,time:entry.course_time,title:entry.course_title,grade:entry.course_grade,tag1:entry.course_tag1,tag2:entry.course_tag2,tag3:entry.course_tag3,courseLike:entry.course_quality,entriesArray:entriesArray,averagesArray:averagesArray});})]});};export default CoursePage;","map":{"version":3,"sources":["/Users/rodericcoscolluela/Documents/password-manager/client/src/components/CoursePage.js"],"names":["React","useParams","CoursePageHeader","Entries","CoursePage","averagesArray","entriesArray","setIsOpen","setFilledForm","setCurrentPageName","setIsFilledOpen","isFilledOpen","isOpen","difficultyArray","courseArray","workloadArray","profRateArray","facultyArray","coursesArray","filledForm","currentPageName","setIsSuccessOpen","id","sort","a","b","time","filter","entry","average_title","toString","toLowerCase","includes","map","average_name","average_number","average_difficulty","average_repeat","average_workload","average_avg","course_time","course_title","course_name","course_number","course_prof","course_difficulty","course_workload","course_prof_rating","course_comment","course_faculty","course_day","course_month","course_year","course_grade","course_tag1","course_tag2","course_tag3","course_quality"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport CoursePageHeader from \"./CoursePageHeader\";\nimport Entries from \"./Entries\";\n\nconst CoursePage = ({\n  averagesArray,\n  entriesArray,\n  setIsOpen,\n  setFilledForm,\n  setCurrentPageName,\n  setIsFilledOpen,\n  isFilledOpen,\n  isOpen,\n  difficultyArray,\n  courseArray,\n  workloadArray,\n  profRateArray,\n  facultyArray,\n  coursesArray,\n  filledForm,\n  currentPageName,\n  setIsSuccessOpen\n}) => {\n  const { id } = useParams();\n  return (\n    <React.Fragment>\n      {averagesArray\n        .sort((a, b) => (a.time < b.time ? 1 : -1))\n        .filter((entry) => {\n          if (\n            !entry.average_title\n              .toString()\n              .toLowerCase()\n              .includes(id.toString().toLowerCase())\n          ) {\n            return null;\n          } else {\n            return entry;\n          }\n        })\n        .map((entry) => (\n          <CoursePageHeader\n            id={id}\n            courseName={entry.average_name}\n            courseNumber={entry.average_number}\n            averagesArray={averagesArray}\n            entriesArray={entriesArray}\n            difficulty={entry.average_difficulty}\n            repeat={entry.average_repeat}\n            workload={entry.average_workload}\n            average={entry.average_avg}\n            setIsOpen={setIsOpen}\n            setFilledForm={setFilledForm}\n            setCurrentPageName={setCurrentPageName}\n            setIsFilledOpen={setIsFilledOpen}\n            isFilledOpen={isFilledOpen}\n            isOpen={isOpen}\n            difficultyArray={difficultyArray}\n            courseArray={courseArray}\n            workloadArray={workloadArray}\n            profRateArray={profRateArray}\n            facultyArray={facultyArray}\n            coursesArray={courseArray}\n            filledForm={filledForm}\n            currentPageName={currentPageName}\n            setIsSuccessOpen={setIsSuccessOpen}\n          />\n        ))}\n      {entriesArray\n        .sort((a, b) => (a.course_time < b.course_time ? 1 : -1))\n        .filter((entry) => {\n          if (\n            !entry.course_title\n              .toString()\n              .toLowerCase()\n              .includes(id.toString().toLowerCase())\n          ) {\n            return null;\n          } else {\n            return entry;\n          }\n        })\n        .map((entry) => (\n          <Entries\n            courseName={entry.course_name}\n            courseNumber={entry.course_number}\n            professor={entry.course_prof}\n            difficulty={entry.course_difficulty}\n            workload={entry.course_workload}\n            profRating={entry.course_prof_rating}\n            comments={entry.course_comment}\n            faculty={entry.course_faculty}\n            day={entry.course_day}\n            month={entry.course_month}\n            year={entry.course_year}\n            time={entry.course_time}\n            title={entry.course_title}\n            grade={entry.course_grade}\n            tag1={entry.course_tag1}\n            tag2={entry.course_tag2}\n            tag3={entry.course_tag3}\n            courseLike={entry.course_quality}\n            entriesArray={entriesArray}\n            averagesArray={averagesArray}\n          />\n        ))}\n    </React.Fragment>\n  );\n};\n\nexport default CoursePage;\n"]},"metadata":{},"sourceType":"module"}