{"ast":null,"code":"var _jsxFileName = \"/Users/rodericcoscolluela/Documents/password-manager/client/src/components/CoursePage.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport CoursePageHeader from \"./CoursePageHeader\";\nimport Entries from \"./Entries\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CoursePage = _ref => {\n  _s();\n\n  let {\n    averagesArray,\n    entriesArray,\n    setIsOpen,\n    setFilledForm,\n    setCurrentPageName,\n    setIsFilledOpen,\n    isFilledOpen,\n    isOpen,\n    difficultyArray,\n    courseArray,\n    workloadArray,\n    profRateArray,\n    facultyArray,\n    coursesArray,\n    filledForm,\n    currentPageName,\n    setIsSuccessOpen\n  } = _ref;\n  const {\n    id\n  } = useParams();\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [averagesArray.sort((a, b) => a.time < b.time ? 1 : -1).filter(entry => {\n      if (!entry.average_title.toString().toLowerCase().includes(id.toString().toLowerCase())) {\n        return null;\n      } else {\n        return entry;\n      }\n    }).map(entry => /*#__PURE__*/_jsxDEV(CoursePageHeader, {\n      id: id,\n      courseName: entry.average_name,\n      courseNumber: entry.average_number,\n      averagesArray: averagesArray,\n      entriesArray: entriesArray,\n      difficulty: entry.average_difficulty,\n      repeat: entry.average_repeat,\n      workload: entry.average_workload,\n      average: entry.average_avg,\n      setIsOpen: setIsOpen,\n      setFilledForm: setFilledForm,\n      setCurrentPageName: setCurrentPageName,\n      setIsFilledOpen: setIsFilledOpen,\n      isFilledOpen: isFilledOpen,\n      isOpen: isOpen,\n      difficultyArray: difficultyArray,\n      courseArray: courseArray,\n      workloadArray: workloadArray,\n      profRateArray: profRateArray,\n      facultyArray: facultyArray,\n      coursesArray: courseArray,\n      filledForm: filledForm,\n      currentPageName: currentPageName,\n      setIsSuccessOpen: setIsSuccessOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }, this)), entriesArray.sort((a, b) => a.course_time < b.course_time ? 1 : -1).filter(entry => {\n      if (!entry.course_title.toString().toLowerCase().includes(id.toString().toLowerCase())) {\n        return null;\n      } else {\n        return entry;\n      }\n    }).map(entry => /*#__PURE__*/_jsxDEV(Entries, {\n      courseName: entry.course_name,\n      courseNumber: entry.course_number,\n      professor: entry.course_prof,\n      difficulty: entry.course_difficulty,\n      workload: entry.course_workload,\n      profRating: entry.course_prof_rating,\n      comments: entry.course_comment,\n      faculty: entry.course_faculty,\n      day: entry.course_day,\n      month: entry.course_month,\n      year: entry.course_year,\n      time: entry.course_time,\n      title: entry.course_title,\n      grade: entry.course_grade,\n      tag1: entry.course_tag1,\n      tag2: entry.course_tag2,\n      tag3: entry.course_tag3,\n      courseLike: entry.course_quality,\n      entriesArray: entriesArray,\n      averagesArray: averagesArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CoursePage, \"yQgCIz/jJfqV1l9s2yoba81MT5A=\", false, function () {\n  return [useParams];\n});\n\n_c = CoursePage;\nexport default CoursePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoursePage\");","map":{"version":3,"sources":["/Users/rodericcoscolluela/Documents/password-manager/client/src/components/CoursePage.js"],"names":["React","useParams","CoursePageHeader","Entries","CoursePage","averagesArray","entriesArray","setIsOpen","setFilledForm","setCurrentPageName","setIsFilledOpen","isFilledOpen","isOpen","difficultyArray","courseArray","workloadArray","profRateArray","facultyArray","coursesArray","filledForm","currentPageName","setIsSuccessOpen","id","sort","a","b","time","filter","entry","average_title","toString","toLowerCase","includes","map","average_name","average_number","average_difficulty","average_repeat","average_workload","average_avg","course_time","course_title","course_name","course_number","course_prof","course_difficulty","course_workload","course_prof_rating","course_comment","course_faculty","course_day","course_month","course_year","course_grade","course_tag1","course_tag2","course_tag3","course_quality"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport CoursePageHeader from \"./CoursePageHeader\";\nimport Entries from \"./Entries\";\n\nconst CoursePage = ({\n  averagesArray,\n  entriesArray,\n  setIsOpen,\n  setFilledForm,\n  setCurrentPageName,\n  setIsFilledOpen,\n  isFilledOpen,\n  isOpen,\n  difficultyArray,\n  courseArray,\n  workloadArray,\n  profRateArray,\n  facultyArray,\n  coursesArray,\n  filledForm,\n  currentPageName,\n  setIsSuccessOpen\n}) => {\n  const { id } = useParams();\n  return (\n    <React.Fragment>\n      {averagesArray\n        .sort((a, b) => (a.time < b.time ? 1 : -1))\n        .filter((entry) => {\n          if (\n            !entry.average_title\n              .toString()\n              .toLowerCase()\n              .includes(id.toString().toLowerCase())\n          ) {\n            return null;\n          } else {\n            return entry;\n          }\n        })\n        .map((entry) => (\n          <CoursePageHeader\n            id={id}\n            courseName={entry.average_name}\n            courseNumber={entry.average_number}\n            averagesArray={averagesArray}\n            entriesArray={entriesArray}\n            difficulty={entry.average_difficulty}\n            repeat={entry.average_repeat}\n            workload={entry.average_workload}\n            average={entry.average_avg}\n            setIsOpen={setIsOpen}\n            setFilledForm={setFilledForm}\n            setCurrentPageName={setCurrentPageName}\n            setIsFilledOpen={setIsFilledOpen}\n            isFilledOpen={isFilledOpen}\n            isOpen={isOpen}\n            difficultyArray={difficultyArray}\n            courseArray={courseArray}\n            workloadArray={workloadArray}\n            profRateArray={profRateArray}\n            facultyArray={facultyArray}\n            coursesArray={courseArray}\n            filledForm={filledForm}\n            currentPageName={currentPageName}\n            setIsSuccessOpen={setIsSuccessOpen}\n          />\n        ))}\n      {entriesArray\n        .sort((a, b) => (a.course_time < b.course_time ? 1 : -1))\n        .filter((entry) => {\n          if (\n            !entry.course_title\n              .toString()\n              .toLowerCase()\n              .includes(id.toString().toLowerCase())\n          ) {\n            return null;\n          } else {\n            return entry;\n          }\n        })\n        .map((entry) => (\n          <Entries\n            courseName={entry.course_name}\n            courseNumber={entry.course_number}\n            professor={entry.course_prof}\n            difficulty={entry.course_difficulty}\n            workload={entry.course_workload}\n            profRating={entry.course_prof_rating}\n            comments={entry.course_comment}\n            faculty={entry.course_faculty}\n            day={entry.course_day}\n            month={entry.course_month}\n            year={entry.course_year}\n            time={entry.course_time}\n            title={entry.course_title}\n            grade={entry.course_grade}\n            tag1={entry.course_tag1}\n            tag2={entry.course_tag2}\n            tag3={entry.course_tag3}\n            courseLike={entry.course_quality}\n            entriesArray={entriesArray}\n            averagesArray={averagesArray}\n          />\n        ))}\n    </React.Fragment>\n  );\n};\n\nexport default CoursePage;\n"]},"metadata":{},"sourceType":"module"}