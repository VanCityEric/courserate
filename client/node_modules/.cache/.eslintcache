[{"D:\\Coding\\CourseRate\\course-rate\\client\\src\\index.js":"1","D:\\Coding\\CourseRate\\course-rate\\client\\src\\reportWebVitals.js":"2","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\Footer.js":"3","D:\\Coding\\CourseRate\\course-rate\\client\\src\\App.js":"4","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\CoursePage.js":"5","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\Dashboard.js":"6","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\Nav.js":"7","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\ResultsPage.js":"8","D:\\Coding\\CourseRate\\course-rate\\client\\src\\modals\\PostSuccess.js":"9","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\SearchForm.js":"10","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\CoursePageHeader.js":"11","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\Tags.js":"12","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\DashboardHeader.js":"13","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\SearchEntries.js":"14","D:\\Coding\\CourseRate\\course-rate\\client\\src\\modals\\NewPost.js":"15","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\ResultsHeader.js":"16","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\Entries.js":"17","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\NewPostForm.js":"18","D:\\Coding\\CourseRate\\course-rate\\client\\src\\modals\\NewPostFilled.js":"19","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\NewPostFormFilled.js":"20"},{"size":588,"mtime":1646012966780,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1644380790790,"results":"23","hashOfConfig":"22"},{"size":575,"mtime":1646010237610,"results":"24","hashOfConfig":"22"},{"size":7813,"mtime":1646020735550,"results":"25","hashOfConfig":"22"},{"size":3386,"mtime":1646010577400,"results":"26","hashOfConfig":"22"},{"size":2604,"mtime":1650659614820,"results":"27","hashOfConfig":"22"},{"size":1592,"mtime":1646254865170,"results":"28","hashOfConfig":"22"},{"size":1655,"mtime":1646011240950,"results":"29","hashOfConfig":"22"},{"size":716,"mtime":1645959984420,"results":"30","hashOfConfig":"22"},{"size":1782,"mtime":1650659892450,"results":"31","hashOfConfig":"22"},{"size":5050,"mtime":1695098214000,"results":"32","hashOfConfig":"22"},{"size":149,"mtime":1645394974580,"results":"33","hashOfConfig":"22"},{"size":811,"mtime":1645333784530,"results":"34","hashOfConfig":"22"},{"size":1574,"mtime":1695098338000,"results":"35","hashOfConfig":"22"},{"size":1181,"mtime":1645959300830,"results":"36","hashOfConfig":"22"},{"size":457,"mtime":1646008859650,"results":"37","hashOfConfig":"22"},{"size":5131,"mtime":1646254858030,"results":"38","hashOfConfig":"22"},{"size":14266,"mtime":1695098060000,"results":"39","hashOfConfig":"22"},{"size":1500,"mtime":1650659803730,"results":"40","hashOfConfig":"22"},{"size":13245,"mtime":1645993694150,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},"1ptlr4r",{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},"D:\\Coding\\CourseRate\\course-rate\\client\\src\\index.js",["113"],[],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/styles.css\";\nimport \"./styles/mediaqueries.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport App from \"./App\";\nimport Footer from \"./components/Footer\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","D:\\Coding\\CourseRate\\course-rate\\client\\src\\reportWebVitals.js",[],[],"D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\Footer.js",[],[],"D:\\Coding\\CourseRate\\course-rate\\client\\src\\App.js",["114","115"],[],"import React, { useState, useEffect } from \"react\";\nimport Dashboard from \"./components/Dashboard\";\nimport Nav from \"./components/Nav\";\nimport PostSuccess from \"./modals/PostSuccess\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  useRoutes\n} from \"react-router-dom\";\nimport NewPage from \"./components/ResultsPage\";\nimport ResultsPage from \"./components/ResultsPage\";\nimport CoursePage from \"./components/CoursePage\";\nimport Footer from \"./components/Footer\";\n\nconst App = () => {\n  const [dashboardHeader, setDashboardHeader] = useState(\n    \"Welcome to CourseRate\"\n  );\n  const [resultsHeader, setResultsHeader] = useState(\"\");\n  const [currentSearchValue, setCurrentSearchValue] = useState();\n  const courseArray = [\n    \"ACMA\",\n    \"ALS\",\n    \"ALC\",\n    \"APMA\",\n    \"ARAB\",\n    \"ARCH\",\n    \"BISC\",\n    \"BPK\",\n    \"BUS\",\n    \"CHEM\",\n    \"CHIN\",\n    \"COGS\",\n    \"CMPT\",\n    \"CA\",\n    \"CRIM\",\n    \"DATA\",\n    \"DIAL\",\n    \"DMED\",\n    \"EASC\",\n    \"ECO\",\n    \"ECON\",\n    \"EDUC\",\n    \"EDPR\",\n    \"ETEC\",\n    \"ENSC\",\n    \"ENGL\",\n    \"ENV\",\n    \"EVSC\",\n    \"FASS\",\n    \"FAL\",\n    \"FAN\",\n    \"FREN\",\n    \"GSWS\",\n    \"GS\",\n    \"GEOG\",\n    \"GERM\",\n    \"GERO\",\n    \"GA\",\n    \"GRK\",\n    \"HSCI\",\n    \"HIST\",\n    \"HUM\",\n    \"INLG\",\n    \"INDG\",\n    \"INS\",\n    \"IAT\",\n    \"IS\",\n    \"ITAL\",\n    \"JAPN\",\n    \"LBST\",\n    \"LANG\",\n    \"LAS\",\n    \"LBRL\",\n    \"LS\",\n    \"LING\",\n    \"MTEC\",\n    \"MASC\",\n    \"MATH\",\n    \"MACM\",\n    \"MSE\",\n    \"MBB\",\n    \"NEUR\",\n    \"NUSC\",\n    \"ONC\",\n    \"PERS\",\n    \"PHIL\",\n    \"PHYS\",\n    \"PLAN\",\n    \"POL\",\n    \"PSYC\",\n    \"PLCY\",\n    \"PUB\",\n    \"PUNJ\",\n    \"REM\",\n    \"SCI\",\n    \"SDA\",\n    \"SA\",\n    \"SPAN\",\n    \"STAT\",\n    \"SD\",\n    \"SEE\",\n    \"TEKX\",\n    \"TRSS\",\n    \"URB\",\n    \"WL\"\n  ];\n  const difficultyArray = [\n    \"1 - Very easy\",\n    \"2 - Easy\",\n    \"3 - Normal\",\n    \"4 - Hard\",\n    \"5 - Very hard\"\n  ];\n  const workloadArray = [\n    \"1 - Very light\",\n    \"2 - Light\",\n    \"3 - Normal\",\n    \"4 - Heavy\",\n    \"5 - Very heavy\"\n  ];\n  const profRateArray = [\"1\", \"2\", \"3\", \"4\", \"5\"];\n  const facultyArray = [\n    \"Applied Sciences\",\n    \"Arts and Social Sciences\",\n    \"Beedie School of Business\",\n    \"Communication, Arts and Technology\",\n    \"Education\",\n    \"Environment\",\n    \"Health Sciences\",\n    \"Science\"\n  ];\n\n  const [entriesArray, setEntriesArray] = useState([]);\n  const [coursesArray, setCoursesArray] = useState([]);\n  const [averagesArray, setAveragesArray] = useState([]);\n  const [searchArray, setSearchArray] = useState([]);\n  const [searchName, setSearchName] = useState();\n  const [isOpen, setIsOpen] = useState(false);\n  const [isFilledOpen, setIsFilledOpen] = useState(false);\n  const [filledForm, setFilledForm] = useState(false);\n  const [currentPageName, setCurrentPageName] = useState(\"\");\n  const [isSuccessOpen, setIsSuccessOpen] = useState(false);\n\n\n  console.log(filledForm);\n\n  const getEntries = async () => {\n    try {\n      const response = await fetch(\"/api/get\");\n      const jsonData = await response.json();\n      setEntriesArray(jsonData.rows);\n    } catch (err) {\n      console.log(err.message);\n    }\n  };\n  useEffect(() => {\n    getEntries();\n  }, []);\n\n  const getAverages = async () => {\n    try {\n      const response = await fetch(\"/api/getAverages\");\n      const jsonData = await response.json();\n      setAveragesArray(jsonData.rows);\n    } catch (err) {\n      console.log(err.message);\n    }\n  };\n  useEffect(() => {\n    getAverages();\n  }, []);\n\n  React.useEffect(() => {\n    const data = localStorage.getItem(\"currentSearchValue\");\n    if (data) {\n      setCurrentSearchValue(JSON.parse(data));\n    }\n  }, []);\n\n  React.useEffect(() => {\n    const stateInfo = JSON.stringify(currentSearchValue);\n    if (stateInfo) {\n      localStorage.setItem(\"currentSearchValue\", stateInfo);\n    }\n  });\n\n  React.useEffect(() => {\n    const data = localStorage.getItem(\"searchName\");\n    if (data) {\n      setSearchName(JSON.parse(data));\n    }\n  }, []);\n\n  React.useEffect(() => {\n    const stateInfo = JSON.stringify(searchName);\n    if (stateInfo) {\n      localStorage.setItem(\"searchName\", stateInfo);\n    }\n  });\n\n  \n  return (\n    <React.Fragment>\n      <div className=\"entire-wrapper\">\n        <Router>\n          <Nav\n            setDashboardHeader={setDashboardHeader}\n            courseArray={courseArray}\n            difficultyArray={difficultyArray}\n            workloadArray={workloadArray}\n            profRateArray={profRateArray}\n            facultyArray={facultyArray}\n            entriesArray={entriesArray}\n            setEntriesArray={setEntriesArray}\n            coursesArray={coursesArray}\n            setCoursesArray={setCoursesArray}\n            averagesArray={averagesArray}\n            setAveragesArray={setAveragesArray}\n            searchArray={searchArray}\n            setSearchArray={setSearchArray}\n            setIsOpen={setIsOpen}\n            isOpen={isOpen}\n            filledForm={filledForm}\n            setFilledForm={setFilledForm}\n            currentPageName={currentPageName}\n            setIsSuccessOpen={setIsSuccessOpen}\n          />\n          <div className=\"content\">\n            <Routes>\n              <Route\n                path=\"/\"\n                element={\n                  <Dashboard\n                    dashboardHeader={dashboardHeader}\n                    setDashboardHeader={setDashboardHeader}\n                    setEntriesArray={setEntriesArray}\n                    entriesArray={entriesArray}\n                    averagesArray={averagesArray}\n                    searchArray={searchArray}\n                    setResultsHeader={setResultsHeader}\n                    currentSearchValue={currentSearchValue}\n                    setCurrentSearchValue={setCurrentSearchValue}\n                    setSearchName={setSearchName}\n                    searchName={searchName}\n    \n                  />\n                }\n              />\n              <Route\n                exact\n                path={\"/search/:id\"}\n                element={\n                  <ResultsPage\n                    dashboardHeader={dashboardHeader}\n                    resultsHeader={resultsHeader}\n                    currentSearchValue={currentSearchValue}\n                    entriesArray={entriesArray}\n                    searchArray={searchArray}\n                    averagesArray={averagesArray}\n                    setSearchName={setSearchName}\n                    searchName={searchName}\n                    setCurrentSearchValue={setCurrentSearchValue}\n                  />\n                }\n              />\n              <Route\n                exact\n                path={\"/course/:id\"}\n                element={\n                  <CoursePage\n                    averagesArray={averagesArray}\n                    entriesArray={entriesArray}\n                    searchArray={searchArray}\n                    setIsOpen={setIsOpen}\n                    setFilledForm={setFilledForm}\n                    setCurrentPageName={setCurrentPageName}\n                    setIsFilledOpen={setIsFilledOpen}\n                    isFilledOpen={isFilledOpen}\n                    isOpen={isOpen}\n                    difficultyArray={difficultyArray}\n                    workloadArray={workloadArray}\n                    profRateArray={profRateArray}\n                    facultyArray={facultyArray}\n                    filledForm={filledForm}\n                    currentPageName={currentPageName}\n                    courseArray={courseArray}\n                    setIsSuccessOpen={setIsSuccessOpen}\n                  />\n                }\n              />\n            </Routes>\n            <PostSuccess\n              isSuccessOpen={isSuccessOpen}\n              setIsSuccessOpen={setIsSuccessOpen}\n            />\n          </div>\n        </Router>\n      </div>\n      <Footer />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\CoursePage.js",[],[],"D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\Dashboard.js",["116","117"],[],"import React, { useEffect } from \"react\";\nimport DashboardHeader from \"./DashboardHeader\";\nimport SearchForm from \"./SearchForm\";\nimport Entries from \"./Entries\";\nimport Tags from \"./Tags\";\n\nconst Dashboard = ({\n  dashboardHeader,\n  entriesArray,\n  averagesArray,\n  searchArray,\n  setResultsHeader,\n  setEntriesArray,\n  currentSearchValue,\n  searchName,\n  setSearchName,\n  setCurrentSearchValue,\n\n}) => {\n  return (\n    <React.Fragment>\n      <div className=\"dashboard-container container\">\n        <div className=\"dashboard-wrapper wrapper\">\n          <DashboardHeader dashboardHeader={dashboardHeader} />\n          <SearchForm\n            averagesArray={averagesArray}\n            searchArray={searchArray}\n            setResultsHeader={setResultsHeader}\n            currentSearchValue={currentSearchValue}\n            setCurrentSearchValue={setCurrentSearchValue}\n            setSearchName={setSearchName}\n            searchName={searchName}\n          />\n          <div className=\"recent-container\">\n            <h2 className=\"recent-text\">Recent Reviews</h2>\n            <div className=\"recent-entries-container\">\n              {entriesArray\n                .sort((a, b) => (a.course_time < b.course_time ? 1 : -1))\n                .map((entry) => (\n                  <Entries\n                    courseName={entry.course_name}\n                    courseNumber={entry.course_number}\n                    professor={entry.course_prof}\n                    difficulty={entry.course_difficulty}\n                    workload={entry.course_workload}\n                    profRating={entry.course_prof_rating}\n                    comments={entry.course_comment}\n                    faculty={entry.course_faculty}\n                    day={entry.course_day}\n                    month={entry.course_month}\n                    year={entry.course_year}\n                    time={entry.course_time}\n                    title={entry.course_title}\n                    courseLike={entry.course_quality}\n                    grade={entry.course_grade}\n                    tag1={entry.course_tag1}\n                    tag2={entry.course_tag2}\n                    tag3={entry.course_tag3}\n                    entriesArray={entriesArray}\n                    averagesArray={averagesArray}\n                    thumbsUp={entry.course_thumbs_up}\n                    thumbsDown={entry.course_thumbs_down}\n                    courseId={entry.entry_id}\n              \n                  />\n                ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Dashboard;\n","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\Nav.js",["118","119"],[],"import React, { useState } from \"react\";\nimport logo from \"../courseratelogo.svg\";\nimport NewPost from \"../modals/NewPost\";\nimport { useNavigate } from \"react-router-dom\";\nimport SearchForm from \"./SearchForm\";\n\nconst Nav = ({\n  difficultyArray,\n  courseArray,\n  workloadArray,\n  profRateArray,\n  facultyArray,\n  entriesArray,\n  coursesArray,\n  averagesArray,\n  isOpen,\n  setIsOpen,\n  filledForm,\n  setFilledForm,\n  currentPageName,\n  setIsSuccessOpen\n}) => {\n  const navigate = useNavigate();\n  const homeHandler = () => {\n    navigate(\"/\");\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"nav-container\">\n        <nav>\n          <div>\n            <img className=\"logo\" src={logo} alt=\"logo\" onClick={homeHandler} />\n          </div>\n          <ul className=\"nav-links\">\n            <li onClick={() => homeHandler()}>Home</li>\n            <button className=\"btn post-btn\" onClick={() => setIsOpen(true)}>\n              Post a Review\n            </button>\n          </ul>\n        </nav>\n      </div>\n      <NewPost\n        open={isOpen}\n        difficultyArray={difficultyArray}\n        courseArray={courseArray}\n        workloadArray={workloadArray}\n        profRateArray={profRateArray}\n        facultyArray={facultyArray}\n        setIsOpen={setIsOpen}\n        entriesArray={entriesArray}\n        coursesArray={coursesArray}\n        filledForm={filledForm}\n        setFilledForm={setFilledForm}\n        currentPageName={currentPageName}\n        setIsSuccessOpen={setIsSuccessOpen}\n        averagesArray={averagesArray}\n      />\n    </React.Fragment>\n  );\n};\nexport default Nav;\n","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\ResultsPage.js",["120","121"],[],"import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport ResultsHeader from \"./ResultsHeader\";\nimport SearchEntries from \"./SearchEntries\";\nimport { useHistory } from \"react-router\";\nimport SearchForm from \"./SearchForm\";\n\nconst ResultsPage = ({\n  dashboardHeader,\n  resultsHeader,\n  currentSearchValue,\n  entriesArray,\n  averagesArray,\n  searchArray,\n  setSearchName,\n  searchName,\n  setCurrentSearchValue\n}) => {\n  const { id } = useParams();\n\n  document.title = `Search results for ${id.toString().toUpperCase()}`;\n\n  return (\n    <div className=\"container results-container\">\n      <div className=\"results-wrapper wrapper\">\n       \n        <ResultsHeader currentSearchValue={id} />\n        <SearchForm\n          averagesArray={averagesArray}\n          searchArray={searchArray}\n          currentSearchValue={currentSearchValue}\n          setCurrentSearchValue={setCurrentSearchValue}\n          setSearchName={setSearchName}\n          searchName={searchName}\n        />\n      <div className=\"section-wrapper\">\n        {averagesArray\n          .sort((a, b) => (a.average_title > b.average_title? 1 : -1))\n          .filter((entry) => {\n            if (\n              !entry.average_title\n                .toString()\n                .toLowerCase()\n                .includes(id.toString().toLowerCase())\n            ) {\n              return null;\n            } else {\n              return entry;\n            }\n          })\n          .map((entry) => (\n            <SearchEntries averagesArray={averagesArray} entry={entry} />\n          ))}\n          </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ResultsPage;\n","D:\\Coding\\CourseRate\\course-rate\\client\\src\\modals\\PostSuccess.js",[],[],"D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\SearchForm.js",[],[],"D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\CoursePageHeader.js",["122","123"],[],"import { faBackspace } from \"@fortawesome/free-solid-svg-icons\";\nimport React from \"react\";\nimport NewPostFilled from \"../modals/NewPostFilled\";\n\nconst CoursePageHeader = ({\n  id,\n  averagesArray,\n  entriesArray,\n  courseName,\n  courseNumber,\n  difficulty,\n  workload,\n  average,\n  repeat,\n  setIsOpen,\n  setFilledForm,\n  setCurrentPageName,\n  isFilledOpen,\n  setIsFilledOpen,\n  isOpen,\n  difficultyArray,\n  workloadArray,\n  coursesArray,\n  profRateArray,\n  facultyArray,\n  courseArray,\n  filledForm,\n  currentPageName,\n  setIsSuccessOpen\n}) => {\n  let averageDifficulty = difficulty / repeat;\n  let averageWorkload = workload / repeat;\n  let averageQuality = average / repeat;\n  let difficultyBar = (averageDifficulty / 5) * 100;\n  let difficultyBarWidth = difficultyBar + \"%\";\n  let workloadBar = (averageWorkload / 5) * 100;\n  let workloadBarWidth = workloadBar + \"%\";\n\n  const difficultyProgressBarStyle = {\n    width: difficultyBarWidth,\n    backgroundColor: \"rgb(140, 0, 255)\",\n    height: \"100%\"\n  };\n\n  const workloadProgressBarStyle = {\n    width: workloadBarWidth,\n    backgroundColor: \"rgb(140, 0, 255)\",\n    height: \"100%\"\n  };\n\n  let qualityClassName = \" col1 cp-overall-rating table\";\n\n  if (averageQuality < 3) {\n    qualityClassName += \" red\";\n  } else if (averageQuality === 3) {\n    qualityClassName += \" yellow\";\n  } else if (averageQuality > 3) {\n    qualityClassName += \" green\";\n  }\n\n  const openFilledFormHander = () => {\n    setIsFilledOpen(true);\n    setFilledForm(true);\n    setCurrentPageName(courseName);\n  };\n\n  return (\n    <React.Fragment>\n      <NewPostFilled\n        isFilledOpen={isFilledOpen}\n        setIsFilledOpen={setIsFilledOpen}\n        open={isOpen}\n        difficultyArray={difficultyArray}\n        courseArray={courseArray}\n        workloadArray={workloadArray}\n        profRateArray={profRateArray}\n        facultyArray={facultyArray}\n        setIsOpen={setIsOpen}\n        entriesArray={entriesArray}\n        coursesArray={coursesArray}\n        filledForm={filledForm}\n        setFilledForm={setFilledForm}\n        currentPageName={currentPageName}\n        id={id}\n        courseName={courseName}\n        courseNumber={courseNumber}\n        setIsSuccessOpen={setIsSuccessOpen}\n        averagesArray={averagesArray}\n      />\n      <div className=\"container\">\n        <div className=\"wrapper course-page-container\">\n          <div className=\"course-page\">\n            <div className=\"row\">\n              <div className=\"col1\">\n                <div className=\"table course-page-title\">\n                  <div className=\"vertical\">\n                    <h2>{id}</h2>\n                    <h3>Simon Fraser University</h3>\n                    <button\n                      className=\"btn coursepage-btn\"\n                      onClick={() => setIsFilledOpen(true)}\n                    >\n                      Review this course\n                    </button>\n                  </div>\n                </div>\n              </div>\n              <div className=\"col1\">\n                <div className=\"table course-page-graph\">\n                  <div className=\"vertical\">\n                    <h3>Average Ratings </h3>\n                    <br />\n                    <div className=\"cp-overall-rating-container row\">\n                      <div className={qualityClassName}>\n                        <div className=\"vertical\">\n                          <h2>{averageQuality.toFixed(1)}</h2>\n                        </div>\n                      </div>\n                      <div className=\"col2 cp-overall-text table\">\n                        <div className=\"vertical\">\n                          <p>\n                            Course quality based on{\" \"}\n                            <span className=\"bold\"> {repeat} review(s)</span>\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    <p>\n                      <br />\n                      Difficulty:{\" \"}\n                      <span className=\"bold course-page-rating\">\n                        {averageDifficulty.toFixed(1)}\n                      </span>{\" \"}\n                      <span className=\"out-of-five\">/ 5</span>\n                    </p>\n                    <div className=\"progress-bar-border\">\n                      <div style={difficultyProgressBarStyle}></div>\n                    </div>{\" \"}\n                    <br />\n                    <p>\n                      Workload:{\" \"}\n                      <span className=\"bold course-page-rating\">\n                        {averageWorkload.toFixed(1)}\n                      </span>{\" \"}\n                      <span className=\"out-of-five\">/ 5</span>\n                    </p>\n                    <div className=\"progress-bar-border\">\n                      <div style={workloadProgressBarStyle}></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default CoursePageHeader;\n","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\Tags.js",[],[],"D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\DashboardHeader.js",[],[],"D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\SearchEntries.js",["124","125"],[],"import React from 'react'\nimport Entries from './Entries'\nimport { useNavigate } from \"react-router-dom\";\n\nconst SearchEntries = ({averagesArray, entry, searchArray, setSearchName}) => {\n    let averageNum = entry.average_avg;\n    let repeatedTimes = entry.average_repeat;\n    let averageSum = (averageNum/repeatedTimes).toFixed(1);\n    let className = 'average-circle';\n    if(averageSum < 3) {\n        className += ' red';\n      } else if (averageSum == 3) {\n        className += ' yellow';\n      } else if (averageSum > 3) {\n        className += ' green';\n      }\n\nconst navigate = useNavigate();\nconst searchClickHandler = (e) => {\n    e.preventDefault();\n    navigate(`/course/${(entry.average_title)}`);\n}\n\n  return (\n    <div className=\"search-entries-container\" onClick={(e) => searchClickHandler(e)} >\n        <div className=\"entries table\">\n            <div className=\"row vertical\">\n                <div className='col2'>\n                    <div className=\"\">\n                        <div className={className}>\n                            {averageSum}\n                        </div>\n                        <p class=\"num-of-ratings\">{entry.average_repeat} review(s)</p>\n                    </div>\n                </div>\n                 <div className='col1'>\n                    <div className=\"vertical\">\n                        <h2 className=\"search-entry-title\">{entry.average_name} {entry.average_number}</h2>\n                    </div>\n                </div>\n               \n            </div>\n        </div>\n    </div>\n  )\n}\n\nexport default SearchEntries","D:\\Coding\\CourseRate\\course-rate\\client\\src\\modals\\NewPost.js",[],[],"D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\ResultsHeader.js",["126"],[],"import React from \"react\";\nimport SearchForm from \"./SearchForm\";\n\nconst ResultsHeader = ({ resultsHeader, currentSearchValue }) => {\n  return (\n    <div className=\"results-header-container header\">\n      <div className=\"section-wrapper\">\n        <h2 class=\"search-results-header\">\n          Search results for{\" \"}\n          <span className=\"bold\"> \"{currentSearchValue}\"</span>\n        </h2>\n      </div>\n    </div>\n  );\n};\n\nexport default ResultsHeader;\n","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\Entries.js",["127","128","129","130"],[],"import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faThumbsUp, faThumbsDown } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Entries = ({\n  courseName,\n  courseNumber,\n  professor,\n  difficulty,\n  workload,\n  comments,\n  faculty,\n  courseLike,\n  day,\n  month,\n  year,\n  title,\n  grade,\n  tag1,\n  tag2,\n  tag3,\n  thumbsUp,\n  courseId,\n}) => {\n  const monthNames = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n  ];\n\n  useEffect(() => {\n    setThumbsUpNumber(thumbsUp);\n  }, [thumbsUp]);\n\n  let qualityClassName = \"thumbs table\";\n  let difficultyClassName = \"thumbs table\";\n  let workloadClassName = \"thumbs table\";\n  const [thumbsUpNumber, setThumbsUpNumber] = useState(1);\n  const [thumbsUpClicked, setThumbsUpClicked] = useState(false);\n\n  let userScore = courseLike.toFixed(1);\n  let difficultyScore = difficulty.toFixed(1);\n  let workloadScore = workload.toFixed(1);\n\n  if (courseLike < 3) {\n    qualityClassName += \" red\";\n  } else if (courseLike === 3) {\n    qualityClassName += \" yellow\";\n  } else if (courseLike > 3) {\n    qualityClassName += \" green\";\n  }\n\n  React.useEffect(() => {\n    const data = localStorage.getItem(\"thumbsUpState\");\n    if (data) {\n      setThumbsUpClicked(JSON.parse(data));\n    }\n  }, []);\n\n  React.useEffect(() => {\n    const stateInfo = JSON.stringify(thumbsUpClicked);\n    if (stateInfo) {\n      localStorage.setItem(\"thumbsUpState\", stateInfo);\n    }\n  }, [thumbsUpClicked]);\n\n  // if (difficultyScore > 3) {\n  //   difficultyClassName += \" red\";\n  // } else if (difficultyScore == 3) {\n  //   difficultyClassName += \" yellow\";\n  // } else if (difficultyScore < 3) {\n  //   difficultyClassName += \" green\";\n  // }\n\n  // if (workloadScore > 3) {\n  //   workloadClassName += \" red\";\n  // } else if (workloadScore == 3) {\n  //   workloadClassName += \" yellow\";\n  // } else if (workloadScore < 3) {\n  //   workloadClassName += \" green\";\n  // }\n\n  const navigate = useNavigate();\n  const courseClickHandler = (e) => {\n    e.preventDefault();\n    navigate(`/course/${title}`);\n  };\n\n  const thumbsUpHandler = async () => {\n    if (thumbsUpClicked === false) {\n      setThumbsUpClicked(true);\n    } else  {\n      setThumbsUpClicked(false)\n    }\n\n    setThumbsUpNumber(thumbsUpNumber + 1);\n    try {\n      const body = {\n        courseId,\n        thumbsUpNumber\n      };\n      await fetch(\"/api/incrementThumbsUp\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(body)\n      });\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n  console.log(thumbsUpClicked);\n  console.log(thumbsUpNumber);\n\n  return (\n    <div className=\"recent-entries entries row section-wrapper\">\n      <div className=\"review-like-section col1\">\n        <p className=\"average-rating\">QUALITY</p>\n        <div className={qualityClassName}>\n          <div className=\"vertical\">\n            <div>{userScore}</div>\n          </div>\n        </div>\n\n        <p className=\"average-rating margin-top\">DIFFICULTY </p>\n        <div className={difficultyClassName}>\n          <div className=\"vertical\">\n            <div>{difficultyScore}</div>\n          </div>\n        </div>\n        <p className=\"average-rating margin-top\">WORKLOAD </p>\n        <div className={workloadClassName}>\n          <div className=\"vertical\">\n            <div>{workloadScore}</div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"review-text-section col2\">\n        <div className=\"review-top-row\">\n          <div className=\"row\">\n            <div className=\"review-course-name col1\">\n              <h2 onClick={(e) => courseClickHandler(e)}>\n                {courseName} {courseNumber}\n              </h2>\n            </div>\n            <div className=\"review-date col2\">\n              <p className=\"date\">\n                {monthNames[month]} {day}, {year}\n              </p>\n            </div>\n          </div>\n          <div className=\"row review-middle-row\">\n            <p>\n              Professor: <span className=\"bold\">{professor}</span>\n            </p>\n\n            <br />\n            <p>\n              <span className=\"bold\">Comment:</span>\n            </p>\n            <p>{comments}</p>\n          </div>\n          <span className=\"entry-tags\">{tag1}</span>\n          <span className=\"entry-tags\">{tag2}</span>\n          <span className=\"entry-tags\">{tag3}</span>\n          <div className=\"bottom-row-container\">\n            <div className=\"row review-bottom-row\">\n              <div className=\"col2 major\">\n                <p>\n                  Major: <span className=\"bold\">{faculty}</span>\n                </p>\n              </div>\n              <div className=\"col2 grade-received\">\n                <p>\n                  Grade received: <span className=\"bold\">{grade}</span>\n                </p>\n              </div>\n            \n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Entries;\n","D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\NewPostForm.js",["131","132","133","134"],[],"import React, { useEffect, useState } from \"react\";\n\nconst NewPostForm = ({\n  courseArray,\n  difficultyArray,\n  workloadArray,\n  profRateArray,\n  facultyArray,\n  setIsOpen,\n  averagesArray,\n  entriesArray,\n  filledForm,\n  setFilledForm,\n  currentPageName,\n  setIsSuccessOpen\n}) => {\n  const [error, setError] = useState(\"\");\n  const [courseGrade, setCourseGrade] = useState(\"\");\n  const [tag1, setTag1] = useState(\"\");\n  const [tag2, setTag2] = useState(\"\");\n  const [tag3, setTag3] = useState(\"\");\n  const [courseName, setCourseName] = useState(\"\");\n  const [courseNumber, setCourseNumber] = useState(0);\n  const [courseProfessor, setCourseProfessor] = useState(\"\");\n  const [courseDifficulty, setCourseDifficulty] = useState(\"\");\n  const [courseWorkload, setCourseWorkload] = useState(0);\n  const [courseProfRating, setCourseProfRating] = useState(0);\n  const [courseComments, setCourseComments] = useState(\"\");\n  const [courseFaculty, setCourseFaculty] = useState(\"\");\n  const [courseQuality, setCourseQuality] = useState(0);\n\n  const onCancel = () => {\n    setError(\"\");\n    setIsOpen(false);\n    setFilledForm(false);\n  };\n\n  const courseCommentsHandler = e => {\n    let commentApostrophe = (e.target.value).replace(/'/g, \"\\'\\'\");\n    setCourseComments(commentApostrophe);\n  }\n\n  const courseQualityHandler = (e) => {\n    console.log(courseQuality);\n    if (e.target.value === \"1 - avoid it all costs!\") {\n      setCourseQuality(1);\n    } else if (e.target.value === \"3 - just fine\") {\n      setCourseQuality(3);\n    } else if (e.target.value === \"5 - awesome class!\") {\n      setCourseQuality(5);\n    } else {\n      setCourseQuality(Number(e.target.value));\n    }\n  };\n\n  const difficultyHandler = (e) => {\n    if (e.target.value === \"1 - Very easy\") {\n      setCourseDifficulty(1);\n    } else if (e.target.value === \"2 - Easy\") {\n      setCourseDifficulty(2);\n    } else if (e.target.value === \"3 - Normal\") {\n      setCourseDifficulty(3);\n    } else if (e.target.value === \"4 - Hard\") {\n      setCourseDifficulty(4);\n    } else if (e.target.value === \"5 - Very hard\") {\n      setCourseDifficulty(5);\n    }\n  };\n\n  const workloadHandler = (e) => {\n    if (e.target.value === \"1 - Very light\") {\n      setCourseWorkload(1);\n    } else if (e.target.value === \"2 - Light\") {\n      setCourseWorkload(2);\n    } else if (e.target.value === \"3 - Normal\") {\n      setCourseWorkload(3);\n    } else if (e.target.value === \"4 - Heavy\") {\n      setCourseWorkload(4);\n    } else if (e.target.value === \"5 - Very heavy\") {\n      setCourseWorkload(5);\n    }\n  };\n\n  let titleCourse = courseName + \" \" + courseNumber;\n  let date = new Date();\n  let repeat = 1;\n  let thumbs = 0;\n\n  const NewEntryHandler = async (e) => {\n    let courseYear = date.getFullYear();\n    let courseMonth = date.getMonth();\n    let courseDay = date.getDate();\n    let courseTime = date.getTime();\n\n    e.preventDefault();\n    if (\n      courseName !== \"\" &&\n      courseQuality !== \"\" &&\n      courseNumber !== \"\" &&\n      courseProfessor !== \"\" &&\n      courseDifficulty !== \"\" &&\n      courseWorkload !== \"\" &&\n      courseProfRating !== \"\" &&\n      courseFaculty !== \"\"\n    ) {\n      try {\n        const body = {\n          courseName,\n          courseNumber,\n          courseProfessor,\n          courseDifficulty,\n          courseWorkload,\n          courseProfRating,\n          courseComments,\n          courseQuality,\n          courseGrade,\n          tag1,\n          tag2,\n          tag3,\n          titleCourse,\n          courseYear,\n          courseDay,\n          courseMonth,\n          courseFaculty,\n          courseTime,\n          repeat, \n          thumbs\n        };\n        await fetch(\"/api/insert\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(body)\n        });\n\n        // if (\n        //   averagesArray.some(\n        //     (entry) =>\n        //       entry.average_title.toString().toLowerCase() ===\n        //       titleCourse.toLowerCase()\n        //   )\n        // ) {\n          await fetch(\"/api/update\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body)\n          });\n        // } else {\n          await fetch(\"/api/averagesinsert\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body)\n          });\n        // }\n      } catch (err) {\n        console.error(err.message);\n      }\n      setError(\"\");\n      setIsOpen(false);\n      setIsSuccessOpen(true);\n    } else {\n      setError(\"Please fill in required fields.\");\n      setIsOpen(true);\n      setIsSuccessOpen(false);\n    }\n  };\n\n  const [tagClassName, setTagClassName] = useState(\"tag\");\n  const tagHandler = (e) => {\n    if (tag1 === \"\" && tag2 === \"\" && tag3 === \"\") {\n      setTag1(e.target.value);\n    } else if (!(tag1 === \"\") && tag2 === \"\" && tag3 === \"\") {\n      setTag2(e.target.value);\n    } else if (!(tag1 === \"\") && !(tag2 === \"\") && tag3 === \"\") {\n      setTag3(e.target.value);\n    }\n  };\n\n  const clearTagsHandler = (e) => {\n    e.preventDefault();\n    setTag1(\"\");\n    setTag2(\"\");\n    setTag3(\"\");\n  };\n\n  let courseNameValue = \"\";\n  if (filledForm === true) {\n    courseNameValue = currentPageName;\n  } else if (filledForm === false) {\n    courseNameValue = \"Choose course\";\n  }\n\n  console.log(courseComments);\n\n  return (\n    <React.Fragment>\n      <div className=\"new-post-container\">\n        <form>\n          <p className=\"form-divider\">COURSE DETAILS</p>\n          <div className=\"row\">\n            <div className=\"col1\">\n              <label htmlFor=\"course-name\">*Course</label>\n              <select\n                onChange={(e) => setCourseName(e.target.value)}\n                id=\"course-name\"\n                className=\"course-name select-form\"\n                name=\"course-name\"\n                defaultValue={courseNameValue}\n              >\n                <option>Choose course</option>\n                {courseArray.map((course) => (\n                  <option>{course}</option>\n                ))}\n              </select>\n            </div>\n            <div className=\"col2\">\n              <label htmlFor=\"course-number\">*Course number</label>\n              <input\n                onChange={(e) => setCourseNumber(e.target.value)}\n                id=\"course-number\"\n                className=\"input\"\n                type=\"text\"\n                placeholder='e.g. \"225\"'\n                size=\"13\"\n              ></input>\n            </div>\n\n            <div className=\"col3\">\n              <label htmlFor=\"course-number\">*Professor</label>\n              <input\n                onChange={(e) => setCourseProfessor(e.target.value)}\n                id=\"professor\"\n                className=\"input\"\n                type=\"text\"\n                placeholder='e.g. \"John Smith\"'\n                size=\"30\"\n              ></input>\n            </div>\n          </div>\n          <p className=\"form-divider\">YOUR REVIEW</p>\n          <div className=\"row\">\n            <div className=\"col1\">\n              <label htmlFor=\"course-difficulty\">*Difficulty</label>\n              <select\n                onChange={difficultyHandler}\n                id=\"course-difficulty\"\n                className=\"course-difficulty select-form\"\n              >\n                <option>Choose difficulty</option>\n                {difficultyArray.map((difficulty) => (\n                  <option>{difficulty}</option>\n                ))}\n              </select>\n            </div>\n            <div className=\"col2\">\n              <label htmlFor=\"course-workload\">*Workload</label>\n              <select\n                onChange={workloadHandler}\n                id=\"course-workload\"\n                className=\"course-workload select-form\"\n              >\n                <option>Choose workload</option>\n                {workloadArray.map((workload) => (\n                  <option>{workload}</option>\n                ))}\n              </select>\n            </div>\n            <div className=\"col3\">\n              <label htmlFor=\"prof-rate\">*Professor rating</label>\n              <select\n                onChange={(e) => setCourseProfRating(Number(e.target.value))}\n                id=\"prof-rate\"\n                className=\"select-form\"\n              >\n                <option>Rate (1-5)</option>\n                {profRateArray.map((profRate) => (\n                  <option>{profRate}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"comment\">Comments</label>\n            <textarea\n              onBlur={courseCommentsHandler}\n              rows=\"6\"\n            ></textarea>\n          </div>\n          <div className=\"row tags-container\">\n            <label>\n              {\" \"}\n              Choose up to 3 tags: <br />\n              <br />\n              <span className=\"bold\">\n                {tag1} &nbsp;&nbsp; {tag2} &nbsp;&nbsp; {tag3}\n              </span>{\" \"}\n            </label>\n            <button className=\"btn tag-btn\" onClick={clearTagsHandler}>\n              Clear\n            </button>\n            <br />\n            <input\n              className={tagClassName}\n              value=\"#ExamHeavy\"\n              onClick={tagHandler}\n              style={{ width: \"9em\" }}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#TonsOfAssignments\"\n              onClick={tagHandler}\n              style={{ width: \"12.8em\" }}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#TonsOfReading\"\n              onClick={tagHandler}\n              style={{ width: \"10.7em\" }}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#Avoid\"\n              onClick={tagHandler}\n              style={{ width: \"6.2em\" }}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#AwesomeProf\"\n              onClick={tagHandler}\n              style={{ width: \"10em\" }}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#BoostYourGPA\"\n              onClick={tagHandler}\n              style={{ width: \"10.3em\" }}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#Interesting\"\n              style={{ width: \"8.5em\" }}\n              onClick={tagHandler}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#ToughGrading\"\n              onClick={tagHandler}\n              style={{ width: \"10.2em\" }}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#TheoryHeavy\"\n              onClick={tagHandler}\n              style={{ width: \"9.9em\" }}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#NoFinals\"\n              onClick={tagHandler}\n              style={{ width: \"7.6em\" }}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#AttendanceMandatory\"\n              onClick={tagHandler}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#ParticipationCounts\"\n              onClick={tagHandler}\n              style={{ width: \"12.8em\" }}\n              readOnly\n            ></input>\n          </div>\n          <div className=\"row\">\n            <div className=\"col1\">\n              <label htmlFor=\"faculty\">*Your faculty</label>\n              <select\n                onChange={(e) => setCourseFaculty(e.target.value)}\n                id=\"faculty\"\n                className=\"faculty select-form\"\n              >\n                <option>Choose faculty</option>\n                {facultyArray.map((faculty) => (\n                  <option>{faculty}</option>\n                ))}\n              </select>\n\n              <label htmlFor=\"course-like\">\n                <br />\n                *How would you rate this class over all?\n              </label>\n              <select\n                onChange={courseQualityHandler}\n                id=\"course-like\"\n                className=\"course-like select-form\"\n              >\n                <option>Rate the course (1-5)</option>\n                <option>1 - avoid it all costs!</option>\n                <option>2</option>\n                <option>3 - just fine</option>\n                <option>4</option>\n                <option>5 - awesome class! </option>\n              </select>\n            </div>\n            <div className=\"col2\">\n              <label htmlFor=\"course-grade\">*Grade received:</label>\n\n              <select\n                onChange={(e) => setCourseGrade(e.target.value)}\n                id=\"course-grade\"\n                className=\"course-grade select-form\"\n              >\n                <option>N/A</option>\n                <option>A+</option>\n                <option>A</option>\n                <option>A-</option>\n                <option>B+</option>\n                <option>B</option>\n                <option>B-</option>\n                <option>C+</option>\n                <option>C</option>\n                <option>C-</option>\n                <option>D</option>\n                <option>F</option>\n                <option>WD</option>\n              </select>\n            </div>\n          </div>\n          <p className=\"error-msg\">{error}</p>\n          <div className=\"modal-btn-container\">\n            <button className=\"btn modal-btn btn-outline\" onClick={onCancel}>\n              {\" \"}\n              Cancel{\" \"}\n            </button>\n            <button\n              type=\"submit\"\n              onClick={NewEntryHandler}\n              className=\"btn modal-btn\"\n            >\n              {\" \"}\n              Done{\" \"}\n            </button>\n          </div>\n        </form>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default NewPostForm;\n","D:\\Coding\\CourseRate\\course-rate\\client\\src\\modals\\NewPostFilled.js",[],[],"D:\\Coding\\CourseRate\\course-rate\\client\\src\\components\\NewPostFormFilled.js",["135","136","137","138"],[],"import React, { useEffect, useState } from \"react\";\nimport Axios from \"axios\";\n\nconst NewPostFormFilled = ({\n  courseArray,\n  difficultyArray,\n  workloadArray,\n  profRateArray,\n  facultyArray,\n  filledForm,\n  currentPageName,\n  id,\n  currentCourseName,\n  currentCourseNumber,\n  setIsFilledOpen,\n  setIsSuccessOpen,\n  averagesArray\n}) => {\n  const [error, setError] = useState(\"\");\n  const [courseGrade, setCourseGrade] = useState(\"\");\n  const [tag1, setTag1] = useState(\"\");\n  const [tag2, setTag2] = useState(\"\");\n  const [tag3, setTag3] = useState(\"\");\n  const [courseName, setCourseName] = useState(\"\");\n  const [courseNumber, setCourseNumber] = useState();\n  const [courseProfessor, setCourseProfessor] = useState(\"\");\n  const [courseDifficulty, setCourseDifficulty] = useState(\"\");\n  const [courseWorkload, setCourseWorkload] = useState(\"\");\n  const [courseProfRating, setCourseProfRating] = useState(\"\");\n  const [courseComments, setCourseComments] = useState(\"\");\n  const [courseFaculty, setCourseFaculty] = useState(\"\");\n  const [courseQuality, setCourseQuality] = useState(\"\");\n\n  const onCancel = (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setIsFilledOpen(false);\n  };\n  const courseQualityHandler = (e) => {\n    setCourseName(currentCourseName);\n    setCourseNumber(currentCourseNumber);\n    if (e.target.value === \"1 - avoid it all costs!\") {\n      setCourseQuality(1);\n    } else if (e.target.value === \"3 - just fine\") {\n      setCourseQuality(3);\n    } else if (e.target.value === \"5 - awesome class!\") {\n      setCourseQuality(5);\n    } else {\n      setCourseQuality(Number(e.target.value));\n    }\n  };\n\n  const difficultyHandler = (e) => {\n    if (e.target.value === \"1 - Very easy\") {\n      setCourseDifficulty(1);\n    } else if (e.target.value === \"2 - Easy\") {\n      setCourseDifficulty(2);\n    } else if (e.target.value === \"3 - Normal\") {\n      setCourseDifficulty(3);\n    } else if (e.target.value === \"4 - Hard\") {\n      setCourseDifficulty(4);\n    } else if (e.target.value === \"5 - Very hard\") {\n      setCourseDifficulty(5);\n    }\n  };\n\n  const workloadHandler = (e) => {\n    if (e.target.value === \"1 - Very light\") {\n      setCourseWorkload(1);\n    } else if (e.target.value === \"2 - Light\") {\n      setCourseWorkload(2);\n    } else if (e.target.value === \"3 - Normal\") {\n      setCourseWorkload(3);\n    } else if (e.target.value === \"4 - Heavy\") {\n      setCourseWorkload(4);\n    } else if (e.target.value === \"5 - Very heavy\") {\n      setCourseWorkload(5);\n    }\n  };\n\n  let titleCourse = courseName + \" \" + courseNumber;\n  let date = new Date();\n  let repeat = 1;\n\n  const NewEntryHandler = async (e) => {\n    let courseYear = date.getFullYear();\n    let courseMonth = date.getMonth();\n    let courseDay = date.getDate();\n    let courseTime = date.getTime();\n\n    e.preventDefault();\n    if (\n      courseQuality !== \"\" &&\n      courseProfessor !== \"\" &&\n      courseDifficulty !== \"\" &&\n      courseWorkload !== \"\" &&\n      courseProfRating !== \"\" &&\n      courseFaculty !== \"\"\n    ) {\n      try {\n        const body = {\n          courseName,\n          courseNumber,\n          courseProfessor,\n          courseDifficulty,\n          courseWorkload,\n          courseProfRating,\n          courseComments,\n          courseQuality,\n          courseGrade,\n          tag1,\n          tag2,\n          tag3,\n          titleCourse,\n          courseYear,\n          courseDay,\n          courseMonth,\n          courseFaculty,\n          courseTime,\n          repeat\n        };\n        await fetch(\"/api/insert\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(body)\n        });\n\n        // if (\n        //   averagesArray.some(\n        //     (entry) =>\n        //       entry.average_title.toString().toLowerCase() ===\n        //       titleCourse.toLowerCase()\n        //   )\n        // ) {\n        await fetch(\"/api/update\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(body)\n        });\n        // } else {\n        await fetch(\"/api/averagesinsert\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(body)\n        });\n        // }\n      } catch (err) {\n        console.error(err.message);\n      }\n      setError(\"\");\n      setIsFilledOpen(false);\n      setIsSuccessOpen(true);\n    } else {\n      setError(\"Please fill in required fields.\");\n      setIsFilledOpen(true);\n      setIsSuccessOpen(false);\n    }\n  };\n\n  const [tagClassName, setTagClassName] = useState(\"tag\");\n  const tagHandler = (e) => {\n    if (tag1 === \"\" && tag2 === \"\" && tag3 === \"\") {\n      setTag1(e.target.value);\n    } else if (!(tag1 === \"\") && tag2 === \"\" && tag3 === \"\") {\n      setTag2(e.target.value);\n    } else if (!(tag1 === \"\") && !(tag2 === \"\") && tag3 === \"\") {\n      setTag3(e.target.value);\n    }\n  };\n\n  const clearTagsHandler = (e) => {\n    e.preventDefault();\n    setTag1(\"\");\n    setTag2(\"\");\n    setTag3(\"\");\n  };\n\n  let courseNameValue = \"\";\n  if (filledForm === true) {\n    courseNameValue = currentPageName;\n  } else if (filledForm === false) {\n    courseNameValue = \"Choose course\";\n  }\n\n  const courseCommentsHandler = (e) => {\n    let commentApostrophe = e.target.value.replace(/'/g, \"''\");\n    setCourseComments(commentApostrophe);\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"new-post-container\">\n        <form>\n          <p className=\"form-divider\">COURSE DETAILS</p>\n          <div className=\"row\">\n            <div className=\"col3\">\n              <label htmlFor=\"course-number\">*Professor</label>\n              <input\n                onChange={(e) => setCourseProfessor(e.target.value)}\n                id=\"professor\"\n                className=\"input\"\n                type=\"text\"\n                placeholder='e.g. \"John Smith\"'\n                size=\"30\"\n              ></input>\n            </div>\n          </div>\n          <p className=\"form-divider\">YOUR REVIEW</p>\n          <div className=\"row\">\n            <div className=\"col1\">\n              <label htmlFor=\"course-difficulty\">*Difficulty</label>\n              <select\n                onChange={difficultyHandler}\n                id=\"course-difficulty\"\n                className=\"course-difficulty select-form\"\n              >\n                <option>Choose difficulty</option>\n                {difficultyArray.map((difficulty) => (\n                  <option>{difficulty}</option>\n                ))}\n              </select>\n            </div>\n            <div className=\"col2\">\n              <label htmlFor=\"course-workload\">*Workload</label>\n              <select\n                onChange={workloadHandler}\n                id=\"course-workload\"\n                className=\"course-workload select-form\"\n              >\n                <option>Choose workload</option>\n                {workloadArray.map((workload) => (\n                  <option>{workload}</option>\n                ))}\n              </select>\n            </div>\n            <div className=\"col3\">\n              <label htmlFor=\"prof-rate\">*Professor rating</label>\n              <select\n                onChange={(e) => setCourseProfRating(Number(e.target.value))}\n                id=\"prof-rate\"\n                className=\"select-form\"\n              >\n                <option>Rate (1-5)</option>\n                {profRateArray.map((profRate) => (\n                  <option>{profRate}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"comment\">Comments</label>\n            <textarea onBlur={courseCommentsHandler} rows=\"6\"></textarea>\n          </div>\n          <div className=\"row tags-container\">\n            <label>\n              {\" \"}\n              Choose up to 3 tags: <br />\n              <br />\n              <span className=\"bold\">\n                {tag1} &nbsp;&nbsp; {tag2} &nbsp;&nbsp; {tag3}\n              </span>{\" \"}\n            </label>\n            <button className=\"btn tag-btn\" onClick={clearTagsHandler}>\n              Clear\n            </button>\n            <br />\n            <input\n              className={tagClassName}\n              value=\"#ExamHeavy\"\n              onClick={tagHandler}\n              style={{ width: \"9em\" }}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#TonsOfAssignments\"\n              onClick={tagHandler}\n              style={{ width: \"12.8em\" }}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#TonsOfReading\"\n              onClick={tagHandler}\n              style={{ width: \"10.7em\" }}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#Avoid\"\n              onClick={tagHandler}\n              style={{ width: \"6.2em\" }}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#AwesomeProf\"\n              onClick={tagHandler}\n              style={{ width: \"10em\" }}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#BoostYourGPA\"\n              onClick={tagHandler}\n              style={{ width: \"10.3em\" }}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#Interesting\"\n              style={{ width: \"8.5em\" }}\n              onClick={tagHandler}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#ToughGrading\"\n              onClick={tagHandler}\n              style={{ width: \"10.2em\" }}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#TheoryHeavy\"\n              onClick={tagHandler}\n              style={{ width: \"9.9em\" }}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#NoFinals\"\n              onClick={tagHandler}\n              style={{ width: \"7.6em\" }}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#AttendanceMandatory\"\n              onClick={tagHandler}\n              readOnly\n            ></input>\n            <input\n              className={tagClassName}\n              value=\"#ParticipationCounts\"\n              onClick={tagHandler}\n              style={{ width: \"12.8em\" }}\n              readOnly\n            ></input>\n          </div>\n          <div className=\"row\">\n            <div className=\"col1\">\n              <label htmlFor=\"faculty\">*Your faculty</label>\n              <select\n                onChange={(e) => setCourseFaculty(e.target.value)}\n                id=\"faculty\"\n                className=\"faculty select-form\"\n              >\n                <option>Choose faculty</option>\n                {facultyArray.map((faculty) => (\n                  <option>{faculty}</option>\n                ))}\n              </select>\n\n              <label htmlFor=\"course-like\">\n                <br />\n                *How would you rate this class over all?\n              </label>\n              <select\n                onChange={courseQualityHandler}\n                id=\"course-like\"\n                className=\"course-like select-form\"\n              >\n                <option>Rate the course (1-5)</option>\n                <option>1 - avoid it all costs!</option>\n                <option>2</option>\n                <option>3 - just fine</option>\n                <option>4</option>\n                <option>5 - awesome class! </option>\n              </select>\n            </div>\n            <div className=\"col2\">\n              <label htmlFor=\"course-grade\">*Grade received:</label>\n\n              <select\n                onChange={(e) => setCourseGrade(e.target.value)}\n                id=\"course-grade\"\n                className=\"course-grade select-form\"\n              >\n                <option>N/A</option>\n                <option>A+</option>\n                <option>A</option>\n                <option>A-</option>\n                <option>B+</option>\n                <option>B</option>\n                <option>B-</option>\n                <option>C+</option>\n                <option>C</option>\n                <option>C-</option>\n                <option>D</option>\n                <option>F</option>\n                <option>WD</option>\n              </select>\n            </div>\n          </div>\n          <p className=\"error-msg\">{error}</p>\n          <div className=\"modal-btn-container\">\n            <button className=\"btn modal-btn btn-outline\" onClick={onCancel}>\n              {\" \"}\n              Cancel{\" \"}\n            </button>\n            <button\n              type=\"submit\"\n              onClick={NewEntryHandler}\n              className=\"btn modal-btn\"\n            >\n              {\" \"}\n              Done{\" \"}\n            </button>\n          </div>\n        </form>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default NewPostFormFilled;\n",{"ruleId":"139","severity":1,"message":"140","line":7,"column":8,"nodeType":"141","messageId":"142","endLine":7,"endColumn":14},{"ruleId":"139","severity":1,"message":"143","line":9,"column":3,"nodeType":"141","messageId":"142","endLine":9,"endColumn":12},{"ruleId":"139","severity":1,"message":"144","line":11,"column":8,"nodeType":"141","messageId":"142","endLine":11,"endColumn":15},{"ruleId":"139","severity":1,"message":"145","line":1,"column":17,"nodeType":"141","messageId":"142","endLine":1,"endColumn":26},{"ruleId":"139","severity":1,"message":"146","line":5,"column":8,"nodeType":"141","messageId":"142","endLine":5,"endColumn":12},{"ruleId":"139","severity":1,"message":"147","line":1,"column":17,"nodeType":"141","messageId":"142","endLine":1,"endColumn":25},{"ruleId":"139","severity":1,"message":"148","line":5,"column":8,"nodeType":"141","messageId":"142","endLine":5,"endColumn":18},{"ruleId":"139","severity":1,"message":"145","line":1,"column":17,"nodeType":"141","messageId":"142","endLine":1,"endColumn":26},{"ruleId":"139","severity":1,"message":"149","line":5,"column":10,"nodeType":"141","messageId":"142","endLine":5,"endColumn":20},{"ruleId":"139","severity":1,"message":"150","line":1,"column":10,"nodeType":"141","messageId":"142","endLine":1,"endColumn":21},{"ruleId":"139","severity":1,"message":"151","line":61,"column":9,"nodeType":"141","messageId":"142","endLine":61,"endColumn":29},{"ruleId":"139","severity":1,"message":"152","line":2,"column":8,"nodeType":"141","messageId":"142","endLine":2,"endColumn":15},{"ruleId":"153","severity":1,"message":"154","line":12,"column":29,"nodeType":"155","messageId":"156","endLine":12,"endColumn":31},{"ruleId":"139","severity":1,"message":"148","line":2,"column":8,"nodeType":"141","messageId":"142","endLine":2,"endColumn":18},{"ruleId":"139","severity":1,"message":"157","line":3,"column":10,"nodeType":"141","messageId":"142","endLine":3,"endColumn":25},{"ruleId":"139","severity":1,"message":"158","line":4,"column":10,"nodeType":"141","messageId":"142","endLine":4,"endColumn":20},{"ruleId":"139","severity":1,"message":"159","line":4,"column":22,"nodeType":"141","messageId":"142","endLine":4,"endColumn":34},{"ruleId":"139","severity":1,"message":"160","line":99,"column":9,"nodeType":"141","messageId":"142","endLine":99,"endColumn":24},{"ruleId":"139","severity":1,"message":"145","line":1,"column":17,"nodeType":"141","messageId":"142","endLine":1,"endColumn":26},{"ruleId":"161","severity":1,"message":"162","line":39,"column":61,"nodeType":"163","messageId":"164","endLine":39,"endColumn":62,"suggestions":"165"},{"ruleId":"161","severity":1,"message":"162","line":39,"column":63,"nodeType":"163","messageId":"164","endLine":39,"endColumn":64,"suggestions":"166"},{"ruleId":"139","severity":1,"message":"167","line":167,"column":24,"nodeType":"141","messageId":"142","endLine":167,"endColumn":39},{"ruleId":"139","severity":1,"message":"145","line":1,"column":17,"nodeType":"141","messageId":"142","endLine":1,"endColumn":26},{"ruleId":"139","severity":1,"message":"168","line":2,"column":8,"nodeType":"141","messageId":"142","endLine":2,"endColumn":13},{"ruleId":"139","severity":1,"message":"167","line":160,"column":24,"nodeType":"141","messageId":"142","endLine":160,"endColumn":39},{"ruleId":"139","severity":1,"message":"169","line":182,"column":5,"nodeType":"141","messageId":"142","endLine":182,"endColumn":20},"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","'useRoutes' is defined but never used.","'NewPage' is defined but never used.","'useEffect' is defined but never used.","'Tags' is defined but never used.","'useState' is defined but never used.","'SearchForm' is defined but never used.","'useHistory' is defined but never used.","'faBackspace' is defined but never used.","'openFilledFormHander' is assigned a value but never used.","'Entries' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'FontAwesomeIcon' is defined but never used.","'faThumbsUp' is defined but never used.","'faThumbsDown' is defined but never used.","'thumbsUpHandler' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\'.","Literal","unnecessaryEscape",["170","171"],["172","173"],"'setTagClassName' is assigned a value but never used.","'Axios' is defined but never used.","'courseNameValue' is assigned a value but never used.",{"messageId":"174","fix":"175","desc":"176"},{"messageId":"177","fix":"178","desc":"179"},{"messageId":"174","fix":"180","desc":"176"},{"messageId":"177","fix":"181","desc":"179"},"removeEscape",{"range":"182","text":"183"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"184","text":"185"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"186","text":"183"},{"range":"187","text":"185"},[1228,1229],"",[1228,1228],"\\",[1230,1231],[1230,1230]]